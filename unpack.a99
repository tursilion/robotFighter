********************************************************************************
*
* Unpacker for VGM packer for Robot Fighter (Tursi)
* not as tight as gzip, but a lot faster to unpack
*
* Every bank has a header through to >6040
*
* Cartridge layout, keeping to 8k blocks for ease
* Bank0 - >6000
*					0040	UNPACK (2700,200) >200
*         0240  ROBO1 (A000,1FFA) >1700
*         1940  ROBO3 (DFF4,0764) >672
*         1FB2  
*	Bank1 - >6002
*					0040	ROBO2 (BFFA,1FFA) >1336
*         1376  DEMQ (2000,0700)  >066E
*         19E4
* Bank2 - >6004
*					0040  ROBOTF_P (0000,1800,V)  >0A8E
*         0ACE  MURDER_P (0000,1800,V)  >0BF2
*         16C0  
* Bank3 - >6006 
*					0040	DASH_C (2000,1800,V)    >09CE
*         0A0E  DASH_P (0000,1800,V)    >0B9E
*         15AC  Patch table (adr, len, bytes, till 0 adr) >0060
*
* All EA#5 images stripped of 6 byte header before packing
*
********************************************************************************

	DEF START

* hopefully won't conflict with c99 stack, should be okay though
	AORG >2700
	
* jump over some vectors
START	
	JMP LOADA
	
* vector so the DSR fakeout can find the other loaders
* we know then that this is at >2702
	DATA LOADR,LOADM,LOADDC,LOADDP
	
* this loads 1-3 falling through, then jumps to >A000	
LOADA
	LWPI >8300
	MOVB R0,@>6000		* set bank
	LI R0,>6240				* data
	LI R1,>A000				* output
	LI R2,>1FFA				* len
	BL @unpack
	
LOADB
	MOVB R0,@>6002		* set bank
	LI R0,>6040				* data
	LI R1,>BFFA				* output
	LI R2,>1FFA				* len
	BL @unpack

LOADC
	MOVB R0,@>6000		* set bank
	LI R0,>7940				* data
	LI R1,>DFF4				* output
	LI R2,>0764				* len
	BL @unpack
	
LOADQ	
* special case since I need a low mem CPU load (E/A utils)
	MOVB R0,@>6002		* set bank
	LI R0,>7376				* data
	LI R1,>2000				* output
	LI R2,>0700				* len
	BL @forcecpu
	
* start the program	
	B @>A000

* these replace DSRLNK calls
* to be safe I use a different workspace
* R12-R15 are not free in this workspace!
*
LOADR
* We always enter at this one. We patch for Mass Murderer if SPACE is
* being pressed. We load Dashie if A is being held ;)
	LWPI >83E0
	
	LI R0,>0300
	MOVB R0,@>8374
	BL @>000E
	
	MOVB @>8375,R0
	CI R0,>2000       * space bar
	JEQ LOADM
	
	CI R0,>4100
	JEQ LOADDC

* okay load Robot Fighter ;)
	LWPI >8330 
	
	MOVB R0,@>6004		* set bank
	LI R0,>6040				* data
	CLR R1						* output (VDP!)
	LI R2,>1800				* len
	BL @unpack

	LWPI >8300
	B *R11
	
* load mass murderer	
LOADM
	LWPI >8330 
	
	LI R0,LOADM       * remember this
	MOV R0,@>2702
	
	MOVB R0,@>6004		* set bank
	LI R0,>6ACE				* data
	CLR R1						* output (VDP!)
	LI R2,>1800				* len
	BL @unpack

* we need to patch the code up some as well
* there are only a few differences
  MOVB R0,@>6006    * set bank
  LI R0,>75AC       * start of table
PATLP
  MOV *R0+,R1       * adr
  JEQ PATEND  
  MOV *R0+,R2       * length in bytes (even)
PATL2
  MOV *R0+,*R1+
  DECT R2
  JNE PATL2
  JMP PATLP
PATEND
	LWPI >8300
	B *R11

LOADDC
	LWPI >8330
	
	LI R0,LOADDC      * remember this
	MOV R0,@>2702

	MOVB R0,@>6006		* set bank
	LI R0,>6040				* data
	LI R1,>2000				* output (VDP!)
	LI R2,>1800				* len
	BL @unpack
	
* fall through and load the other one too	

LOADDP
	LWPI >8330 
	
	MOVB R0,@>6006		* set bank
	LI R0,>6A0E				* data
	CLR R1						* output (VDP!)
	LI R2,>1800				* len
	BL @unpack

	LWPI >8300
	B *R11

******************
* Unpack a stream to VDP
* this is based on my audio player,
* so does not need access to the
* uncompressed data. Hopefully faster.
* R0 - CPU source
* R1 - VDP dest if <0x8000, CPU if >0x8000 (so no decode to low RAM)
* R2 - output length (yes, you have to know)
*
* following are also used internally
* r3 - streampos	(0)
* r4 - streamref	(2)
* r5 - streamcnt	(4)
* r6 - streambase	(6)
* R10- save
******************
unpack
	mov r11,R10
	mov r0,r3			streampos
	clr r4				streamref
	clr r5				streamcnt
	mov r0,r6			streambase
	
	MOV R1,R1			dest check
	JLT cpuplp2

* this is VDP destination	
vdpmode	
	MOV R1,R0				* set the address
	ORI R0,>4000
	SWPB R0
	MOVB R0,@>8C02
	SWPB R0
	MOVB R0,@>8C02
	
unplp2
	bl @getbyte			* get a byte
	movb r0,@>8C00	* write it to VDP
	dec r2
	jne unplp2
	B *R10
	
* this is CPU destination	
cpuplp2
	bl @getbyte			* get a byte
	movb r0,*r1+		* write it to CPU
	dec r2
	jne cpuplp2
	B *R10
	
* this forces a CPU load to low ram	
forcecpu
	mov r11,R10
	mov r0,r3			streampos
	clr r4				streamref
	clr r5				streamcnt
	mov r0,r6			streambase
	jmp cpuplp2

******************
* get a compressed byte from a stream - stream data base in r3
* byte is return in r0 msb
* helper for unpack, uses r3-r6
* r3 - streampos	(old 0)
* r4 - streamref	(old 2)
* r5 - streamcnt	(old 4)
* r6 - streambase	(old 6)
******************
getbyte
	mov r4,r4					* test streamref
	jeq getb1					* not set
	ci r4,>ffff				* test for repeat count
	jeq getb1					* not backref
	movb *r4+, r0			* get back-referenced byte
	dec r5						* decrement counter
	jne getb2					* not 0 yet
	clr r4						* out of bytes,  clear back reference ptr
getb2
	b *r11						* and return
 
getb1
	mov r5,r5					* test streamcnt
	jeq getb3					* out of bytes,  need to figure out the next set

	dec r5						* count down
	jeq getb1inc			* increment always if last byte
	mov r4,r4					* test streamref is 0
	jeq getb1inc			* increment if not a ref (it must have been >ffff here)

* get byte with no increment
	movb *r3,r0				* get byte from current run
	b *r11						* and return

getb1inc
* get byte with increment
	movb *r3+,r0			* get byte from current run
	b *r11						* and return

nostream
	movb r5,r0				* return (r5 is expected to be zero!)
	b *R11

getb3
* count is zero, need to get a new command
	clr r5						* prepare r5
	movb *r3+,r5			* get new count byte
	jeq nostream			* was zero
	jgt getb4					* if high bit is clear (no >80)

	coc @dat40,r5			* check for 40 (indicates 2 byte reference)
	jeq getb3double

* get single byte back reference
	andi r5, >3f00		* mask it
	swpb r5						* store in the lsbyte
	dec r5						* we are going to consume one byte below,  and we know it's at least 4
	clr r4						* prepare msb
	movb *r3+, r4			* get backref pointer
	swpb r4						* put in correct order
	a r6,r4						* add stream base, r4 now has the correct address
	jmp getb3fin

getb3double
	andi r5, >3f00		* mask it
	swpb r5						* store in the lsbyte
	dec r5						* we are going to consume one byte below,  and we know it's at least 4
	movb *r3+, r4			* get backref pointer (can't use mov,  might be misaligned)
	swpb r4
	movb *r3+, r4
	swpb r4						* get back into correct order
	a r6, r4					* make into a pointer (songbase and streambase are the same)

getb3fin
	movb *r4+, r0			* get back-referenced byte
	b *r11						* and return

getb4
* >80 is not set, check for just >40
	coc @dat40,r5
	jeq getb5					* it's set, so go process that

* neither bit is set, so it's just a plain run
	swpb r5						* fix byte order (assumes no corruption,  lsbyte is already zero)
	movb *r3+, r0			* get byte from current run
	dec r5						* count down - no need to test here
	clr r4						* make sure the streamref is zeroed
	b *r11						* and return

getb5
* >40 is set - set up for a repeated character
	andi r5, >3f00		* mask it
	swpb r5						* put in the correct byte
	dec r5						* count down the one we are going to take
	movb *r3, r0			* get the appropriate byte - note no increment!
	seto r4						* set the reference to >ffff
	b *r11						* and return

dat40	 data >4000				* bitfield used by the unpacker

	end
